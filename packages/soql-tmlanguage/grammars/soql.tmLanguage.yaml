# This grammar is a modified copy of:
# https://github.com/forcedotcom/apex-tmLanguage/blob/a6f42529e2e522a6e0f1499e352e004126304194/src/apex.tmLanguage.yml
# using only SOQL query expression at the top-level pattern
---
name: SOQL
scopeName: source.soql
fileTypes: [soql]
uuid: 1CDD8B23-7C84-46AA-9302-476968A79A83

patterns:
  - include: '#soql-query-expression'

repository:
  expression:
    patterns:
      - include: '#comment'
      - include: '#merge-expression'
      - include: '#support-expression'
      - include: '#this-expression'
      - include: '#trigger-context-declaration'
      - include: '#conditional-operator'
      - include: '#expression-operators'
      - include: '#soql-query-expression'
      - include: '#object-creation-expression'
      - include: '#array-creation-expression'
      - include: '#invocation-expression'
      - include: '#member-access-expression'
      - include: '#element-access-expression'
      - include: '#cast-expression'
      - include: '#literal'
      - include: '#parenthesized-expression'
      - include: '#initializer-expression'
      - include: '#identifier'

  # This rule applies exclusively for namespace situations
  # i.e. System.debug(), Database.insert()
  support-expression:
    begin: |-
      (?x)
      (ApexPages|Database|DMLException|Exception|PageReference|Savepoint|SchedulableContext|Schema|SObject|System|Test)(?=\.|\s) # supported apex namespaces
    beginCaptures:
      '1': { name: support.class.apex }
    end: (?<=\)|$)|(?=\})|(?=;)|(?=\)|(?=\]))|(?=\,)
    patterns:
      - include: '#support-type'
      - match: '(?:(\.))([[:alpha:]]*)(?=\()'
        captures:
          '1': { name: punctuation.accessor.apex }
          '2': { name: support.function.apex }
      - match: '(?:(\.))([[:alpha:]]+)'
        captures:
          '1': { name: punctuation.accessor.apex }
          '2': { name: support.type.apex }
      - begin: \(
        beginCaptures:
          '0': { name: punctuation.parenthesis.open.apex }
        end: \)
        endCaptures:
          '0': { name: punctuation.parenthesis.close.apex }
        patterns:
          - include: '#expression'
          - include: '#punctuation-comma'
      - include: '#comment'
      - include: '#statement'

  # This rule applies exclusively for type situations
  # i.e. System.LoggingLevel varName = ..., insert records;, etc.
  support-type:
    name: support.apex
    patterns:
      - include: '#comment'
      - include: '#support-class'
      - include: '#support-functions'
      - include: '#support-name'

  support-class:
    match: \b(ApexPages|Database|DMLException|Exception|PageReference|Savepoint|SchedulableContext|Schema|SObject|System|Test)\b
    captures:
      '1': { name: support.class.apex }

  support-functions:
    match: \b(delete|execute|finish|insert|start|undelete|update|upsert)\b
    captures:
      '1': { name: support.function.apex }

  support-name:
    patterns:
      - match: '(\.)\s*([[:alpha:]]*)(?=\()'
        captures:
          '1': { name: punctuation.accessor.apex }
          '2': { name: support.function.apex }
      - begin: \(
        beginCaptures:
          '0': { name: punctuation.parenthesis.open.apex }
        end: \)
        endCaptures:
          '0': { name: punctuation.parenthesis.close.apex }
        patterns:
          - include: '#expression'
          - include: '#punctuation-comma'
      - match: (\.)\s*([_[:alpha:]]*)
        captures:
          '1': { name: punctuation.accessor.apex }
          '2': { name: support.type.apex }

  merge-expression:
    begin: (merge)\b\s+
    beginCaptures:
      '1': { name: support.function.apex }
    end: (?<=\;)
    patterns:
      - include: '#object-creation-expression'
      - include: '#merge-type-statement'
      - include: '#expression'
      - include: '#punctuation-semicolon'

  merge-type-statement:
    match: ([_[:alpha:]]*)\b\s+([_[:alpha:]]*)\b\s*(\;)
    captures:
      '1': { name: variable.other.readwrite.apex }
      '2': { name: variable.other.readwrite.apex }
      '3': { name: punctuation.terminator.statement.apex }

  trigger-type-statement:
    match: \b(?:(before)|(after))\b
    captures:
      '1': { name: keyword.control.trigger.before.apex }
      '2': { name: keyword.control.trigger.after.apex }

  trigger-context-declaration:
    begin: \b(?:(Trigger))\b(\.)\b
    beginCaptures:
      '1': { name: support.class.trigger.apex }
      '2': { name: punctuation.accessor.apex }
    end: (?=\})|(?=;)|(?=\)|(?=\]))
    patterns:
      - name: support.type.trigger.apex
        match: '\b(isExecuting|isInsert|isUpdate|isDelete|isBefore|isAfter|isUndelete|new|newMap|old|oldMap|size)\b'
      - match: '(?:(\??\.))([[:alpha:]]+)(?=\()'
        captures:
          '1':
            patterns:
              - include: '#punctuation-accessor'
              - include: '#operator-safe-navigation'
          '2': { name: support.function.trigger.apex }
      - begin: \(
        beginCaptures:
          '0': { name: punctuation.parenthesis.open.apex }
        end: \)
        endCaptures:
          '0': { name: punctuation.parenthesis.close.apex }
        patterns:
          - include: '#trigger-type-statement'
          - include: '#javadoc-comment'
          - include: '#comment'
          - include: '#expression'
      - include: '#expression'

  soql-query-expression:
    begin: \b(SELECT)\b\s*
    beginCaptures:
      '1': { name: keyword.operator.query.select.apex }
    end: (?=;)|(?=\])|(?=\))
    patterns:
      - include: '#soql-query-body'
      - include: '#comment'
      - include: '#punctuation-comma'
      - include: '#operator-assignment'
      - include: '#parenthesized-expression'
      - include: '#expression-operators'
      - include: '#literal'
      - match: ([_.[:alpha:]][_.[:alnum:]]*)\s*(\,)?
        captures:
          '1': { name: keyword.query.field.apex }
          '2': { name: punctuation.separator.comma.apex }

  soql-query-body:
    patterns:
      - include: '#trigger-context-declaration'
      - include: '#soql-colon-vars'
      - include: '#soql-functions'
      - include: '#from-clause'
      - include: '#where-clause'
      - include: '#query-operators'
      - include: '#date-literals'
      - include: '#date-literal-with-params'
      - include: '#using-scope'
      - include: '#soql-group-clauses'
      - include: '#orderby-clause'
      - include: '#ordering-direction'
      - include: '#ordering-nulls'

  soql-colon-vars:
    begin: (\:)\s* # preceding colon operator
    beginCaptures:
      '0': { name: keyword.operator.conditional.colon.apex }
    end: (?![_[:alnum:]]|\(|(\?)?\[|<) # next character is not alpha-numeric, nor a (, [, or <. Also, test for ?[
    patterns:
      - include: '#trigger-context-declaration'
      - match: ([_[:alpha:]][_[:alnum:]]*)(\??\.)
        captures:
          '1': { name: variable.other.object.apex }
          '2':
            patterns:
              - include: '#punctuation-accessor'
              - include: '#operator-safe-navigation'
      - include: '#soql-colon-method-statement'
      - name: entity.name.variable.local.apex
        match: '[_[:alpha:]][_[:alnum:]]*'

  soql-colon-method-statement:
    begin: (:?\.)?([_[:alpha:]][_[:alnum:]]*)(?=\()
    beginCaptures:
      '1': { name: punctuation.accessor.apex }
      '2': { name: entity.name.function.apex }
    end: (?<=\))
    patterns:
      - begin: \(
        beginCaptures:
          '0': { name: punctuation.parenthesis.open.apex }
        end: \)
        endCaptures:
          '0': { name: punctuation.parenthesis.close.apex }
        patterns:
          - include: '#expression'
      - include: '#statement'

  soql-group-clauses:
    begin: \(
    beginCaptures:
      '0': { name: punctuation.parenthesis.open.apex }
    end: \)
    endCaptures:
      '0': { name: punctuation.parenthesis.close.apex }
    patterns:
      - include: '#soql-query-expression'
      - include: '#soql-colon-vars'
      - include: '#soql-group-clauses'
      - include: '#punctuation-comma'
      - include: '#operator-assignment'
      - include: '#literal'
      - include: '#query-operators'
      - include: '#date-literals'
      - include: '#date-literal-with-params'
      - include: '#using-scope'
      - name: keyword.query.field.apex
        match: '[_.[:alpha:]][_.[:alnum:]]*'

  soql-functions:
    begin: \b(AVG|CALENDAR_MONTH|CALENDAR_QUARTER|CALENDAR_YEAR|convertCurrency|convertTimezone|COUNT|DAY_IN_MONTH|DAY_IN_WEEK|DAY_IN_YEAR|DAY_ONLY|toLabel|INCLUDES|EXCLUDES|FISCAL_MONTH|FISCAL_QUARTER|FISCAL_YEAR|FORMAT|GROUPING|GROUP BY CUBE|GROUP BY ROLLUP|HOUR_IN_DAY|MAX|MIN|SUM|WEEK_IN_MONTH|WEEK_IN_YEAR)\s*(\()
    beginCaptures:
      '1': { name: support.function.query.apex }
      '2': { name: punctuation.parenthesis.open.apex }
    end: \)
    endCaptures:
      '0': { name: punctuation.parenthesis.close.apex }
    patterns:
      - include: '#literal'
      - include: '#punctuation-comma'
      - include: '#soql-functions'
      - name: keyword.query.field.apex
        match: '[_.[:alpha:]][_.[:alnum:]]*'

  from-clause:
    match: (FROM)\b\s*([_\.[:alnum:]]+)\b\s*
    captures:
      '1': { name: keyword.operator.query.from.apex }
      '2': { name: storage.type.apex }

  where-clause:
    match: \b(WHERE)\b\s*
    captures:
      '1': { name: keyword.operator.query.where.apex }

  orderby-clause:
    match: \b(ORDER BY)\b\s*
    captures:
      '1': { name: keyword.operator.query.orderby.apex }

  ordering-direction:
    match: \b(?:(ASC)|(DESC))\b
    captures:
      '1': { name: keyword.operator.query.ascending.apex }
      '2': { name: keyword.operator.query.descending.apex }

  ordering-nulls:
    match: \b(?:(NULLS first)|(NULLS last))\b
    captures:
      '1': { name: keyword.operator.query.nullsfirst.apex }
      '2': { name: keyword.operator.query.nullslast.apex }

  query-operators:
    match: \b(ABOVE|AND|AT|FOR REFERENCE|FOR UPDATE|FOR VIEW|GROUP BY|HAVING|IN|LIKE|LIMIT|NOT IN|NOT|OFFSET|OR|TYPEOF|UPDATE TRACKING|UPDATE VIEWSTAT|WITH DATA CATEGORY|WITH)\b\s*
    captures:
      '1': { name: keyword.operator.query.apex }

  date-literals:
    match: \b(YESTERDAY|TODAY|TOMORROW|LAST_WEEK|THIS_WEEK|NEXT_WEEK|LAST_MONTH|THIS_MONTH|NEXT_MONTH|LAST_90_DAYS|NEXT_90_DAYS|THIS_QUARTER|LAST_QUARTER|NEXT_QUARTER|THIS_YEAR|LAST_YEAR|NEXT_YEAR|THIS_FISCAL_QUARTER|LAST_FISCAL_QUARTER|NEXT_FISCAL_QUARTER|THIS_FISCAL_YEAR|LAST_FISCAL_YEAR|NEXT_FISCAL_YEAR)\b\s*
    captures:
      '1': { name: keyword.operator.query.date.apex }

  date-literal-with-params:
    match: \b((LAST_N_DAYS|NEXT_N_DAYS|NEXT_N_WEEKS|LAST_N_WEEKS|NEXT_N_MONTHS|LAST_N_MONTHS|NEXT_N_QUARTERS|LAST_N_QUARTERS|NEXT_N_YEARS|LAST_N_YEARS|NEXT_N_FISCAL_QUARTERS|LAST_N_FISCAL_QUARTERS|NEXT_N_FISCAL_YEARS|LAST_N_FISCAL_YEARS)\s*\:\d+)\b
    captures:
      '1': { name: keyword.operator.query.date.apex }

  using-scope:
    match: ((USING SCOPE)\b\s*(Delegated|Everything|Mine|My_Territory|My_Team_Territory|Team))\b\s*
    captures:
      '1': { name: keyword.operator.query.using.apex }

  literal:
    patterns:
      - include: '#boolean-literal'
      - include: '#null-literal'
      - include: '#numeric-literal'
      - include: '#string-literal'

  boolean-literal:
    patterns:
      - name: constant.language.boolean.true.apex
        match: (?<!\.)\btrue\b
      - name: constant.language.boolean.false.apex
        match: (?<!\.)\bfalse\b

  null-literal:
    name: constant.language.null.apex
    match: (?<!\.)\bnull\b

  numeric-literal:
    patterns:
      # match datetime utc constants: 2011-04-26T10:00:00-08:00
      - name: constant.numeric.datetime.apex
        match: \b(\d{4}\-\d{2}\-\d{2}T\d{2}\:\d{2}\:\d{2}(\-|\+)\d{2}\:\d{2})\b
      # match datetime with offset: 1999-01-01T23:01:01Z
      - name: constant.numeric.datetime.apex
        match: \b(\d{4}\-\d{2}\-\d{2}T\d{2}\:\d{2}\:\d{2}(Z)?)\b
      # match date: 1999-01-02
      - name: constant.numeric.date.apex
        match: \b(\d{4}\-\d{2}\-\d{2})\b
      # C# grammar: 0x hex-digits integer-type-suffix[opt] OR 0X hex-digits integer-type-suffix[opt]
      - name: constant.numeric.hex.apex
        match: \b0(x|X)[0-9a-fA-F_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
      # C# grammar: 0b binary-digits integer-type-suffix[opt] OR 0B binary-digits integer-type-suffix[opt]
      - name: constant.numeric.binary.apex
        match: \b0(b|B)[01_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b
      # C# grammar: decimal-digits . decimal-digits exponent-part[opt] real-type-suffix[opt] OR . decimal-digits exponent-part[opt] real-type-suffix[opt]
      - name: constant.numeric.decimal.apex
        match: \b([0-9_]+)?\.[0-9_]+((e|E)[0-9]+)?(F|f|D|d|M|m)?\b
      #  C# grammar: decimal-digits exponent-part real-type-suffix[opt]
      - name: constant.numeric.decimal.apex
        match: \b[0-9_]+(e|E)[0-9_]+(F|f|D|d|M|m)?\b
      # C# grammar: decimal-digits real-type-suffix
      - name: constant.numeric.decimal.apex
        match: \b[0-9_]+(F|f|D|d|M|m)\b
      # C# grammar: decimal-digits integer-type-suffix[opt]
      - name: constant.numeric.decimal.apex
        match: \b[0-9_]+(U|u|L|l|UL|Ul|uL|ul|LU|Lu|lU|lu)?\b

  string-literal:
    name: string.quoted.single.apex
    begin: "'"
    beginCaptures:
      '0': { name: punctuation.definition.string.begin.apex }
    end: (\')|((?:[^\\\n])$)
    endCaptures:
      '1': { name: punctuation.definition.string.end.apex }
      '2': { name: invalid.illegal.newline.apex }
    patterns:
      - include: '#string-character-escape'

  string-character-escape:
    name: constant.character.escape.apex
    match: \\.

  expression-operators:
    patterns:
      - name: keyword.operator.assignment.compound.apex
        match: \*=|/=|%=|\+=|-=
      - name: keyword.operator.assignment.compound.bitwise.apex
        match: \&=|\^=|<<=|>>=|\|=
      - name: keyword.operator.bitwise.shift.apex
        match: <<|>>
      - name: keyword.operator.comparison.apex
        match: ==|!=
      - name: keyword.operator.relational.apex
        match: <=|>=|<|>
      - name: keyword.operator.logical.apex
        match: \!|&&|\|\|
      - name: keyword.operator.bitwise.apex
        match: \&|~|\^|\|
      - name: keyword.operator.assignment.apex
        match: \=
      - name: keyword.operator.decrement.apex
        match: --
      - name: keyword.operator.increment.apex
        match: \+\+
      - name: keyword.operator.arithmetic.apex
        match: '%|\*|/|-|\+'

  conditional-operator:
    # Only match ? if:
    # 1. There isn't a preceding or trailing ? (null-coalescing operator)
    # 2. There isn't a trailing . or [ (null-conditional operator)
    begin: (?<!\?)\?(?!\?|\.|\[)
    beginCaptures:
      '0': { name: keyword.operator.conditional.question-mark.apex }
    end: ':'
    endCaptures:
      '0': { name: keyword.operator.conditional.colon.apex }
    patterns:
      - include: '#expression'

  parenthesized-expression:
    begin: \(
    beginCaptures:
      '0': { name: punctuation.parenthesis.open.apex }
    end: \)
    endCaptures:
      '0': { name: punctuation.parenthesis.close.apex }
    patterns:
      - include: '#expression'

  initializer-expression:
    begin: \{
    beginCaptures:
      '0': { name: punctuation.curlybrace.open.apex }
    end: \}
    endCaptures:
      '0': { name: punctuation.curlybrace.close.apex }
    patterns:
      - include: '#expression'
      - include: '#punctuation-comma'

  identifier:
    name: variable.other.readwrite.apex
    match: '@?[_[:alpha:]][_[:alnum:]]*'

  cast-expression:
    match: |-
      (?x)
      (\()\s*
      (?<type-name>
        (?:
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )\s*
      (\))(?=\s*@?[_[:alnum:]\(])
    captures:
      '1': { name: punctuation.parenthesis.open.apex }
      '2':
        patterns:
          - include: '#support-type'
          - include: '#type'
      # '3': ?<identifier> is a sub-expression. It's final value is not considered.
      # '4': ?<name-and-type-args> is a sub-expression. It's final value is not considered.
      # '5': ?<type-args> is a sub-expression. It's final value is not considered.
      '6': { name: punctuation.parenthesis.close.apex }

  this-expression:
    match: \b(?:(this))\b
    captures:
      '1': { name: keyword.other.this.apex }

  invocation-expression:
    begin: |-
      (?x)
      (?:(\??\.)\s*)?                                  # safe navigator or accessor
      (@?[_[:alpha:]][_[:alnum:]]*)\s*                 # method name
      (?<type-args>\s*<([^<>]|\g<type-args>)+>\s*)?\s* # type arguments
      (?=\()                                           # open paren of argument list
    beginCaptures:
      '1':
        patterns:
          - include: '#punctuation-accessor'
          - include: '#operator-safe-navigation'
      '2': { name: entity.name.function.apex }
      '3':
        patterns:
          - include: '#type-arguments'
    end: (?<=\))
    patterns:
      - include: '#argument-list'

  element-access-expression:
    begin: |-
      (?x)
      (?:(\??\.)\s*)?                       # safe navigator or accessor
      (?:(@?[_[:alpha:]][_[:alnum:]]*)\s*)? # property name
      (?:(\?)\s*)?                          # null-conditional operator?
      (?=\[)                                # open bracket of argument list
    beginCaptures:
      '1':
        patterns:
          - include: '#punctuation-accessor'
          - include: '#operator-safe-navigation'
      '2': { name: variable.other.object.property.apex }
      '3': { name: keyword.operator.null-conditional.apex }
    end: (?<=\])(?!\s*\[)
    patterns:
      - include: '#bracketed-argument-list'

  member-access-expression:
    patterns:
      # An identifier with no type parameters and a dot to the left should
      # be treated as a property, so long as it isn't followed by a ( or [.
      - match: |-
          (?x)
          (\??\.)\s*                       # safe navigator or accessor
          (@?[_[:alpha:]][_[:alnum:]]*)\s* # property name
          (?![_[:alnum:]]|\(|(\?)?\[|<)    # next character is not alpha-numeric, nor a (, [, or <. Also, test for ?[
        captures:
          '1':
            patterns:
              - include: '#punctuation-accessor'
              - include: '#operator-safe-navigation'
          '2': { name: variable.other.object.property.apex }
        # An identifier with type parameters should be treated as an object,
        # regardless of whether there is a dot to the left.
      - match: |-
          (?x)
          (\??\.)?\s*
          (@?[_[:alpha:]][_[:alnum:]]*)
          (?<type-params>\s*<([^<>]|\g<type-params>)+>\s*)
          (?=
            (\s*\?)?
            \s*\.\s*@?[_[:alpha:]][_[:alnum:]]*
          )
        captures:
          '1':
            patterns:
              - include: '#punctuation-accessor'
              - include: '#operator-safe-navigation'
          '2': { name: variable.other.object.apex }
          '3':
            patterns:
              - include: '#type-arguments'
        # An identifier with no type parameters (and no dot to the left per the
        # matches above) should be treated as an object.
      - match: |-
          (?x)
          (@?[_[:alpha:]][_[:alnum:]]*)
          (?=
            (\s*\?)?
            \s*\.\s*@?[_[:alpha:]][_[:alnum:]]*
          )
        captures:
          '1': { name: variable.other.object.apex }

  object-creation-expression:
    patterns:
      - include: '#object-creation-expression-with-parameters'
      - include: '#object-creation-expression-with-no-parameters'
      - include: '#punctuation-comma'

  object-creation-expression-with-parameters:
    begin: |-
      (?x)
      (delete|insert|undelete|update|upsert)?
      \s*(new)\s+
      (?<type-name>
        (?:
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )\s*
      (?=\()
    beginCaptures:
      '1': { name: support.function.apex }
      '2': { name: keyword.control.new.apex }
      '3':
        patterns:
          - include: '#support-type'
          - include: '#type'
    end: (?<=\))
    patterns:
      - include: '#argument-list'

  object-creation-expression-with-no-parameters:
    match: |-
      (?x)
      (delete|insert|undelete|update|upsert)?
      \s*(new)\s+
      (?<type-name>
        (?:
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )\s*
      (?=\{|$)
    captures:
      '1': { name: support.function.apex }
      '2': { name: keyword.control.new.apex }
      '3':
        patterns:
          - include: '#support-type'
          - include: '#type'

  array-creation-expression:
    begin: |-
      (?x)
      \b(new)\b\s*
      (?<type-name>
        (?:
          (?:
            (?:(?<identifier>@?[_[:alpha:]][_[:alnum:]]*)\s*\:\:\s*)? # alias-qualification
            (?<name-and-type-args> # identifier + type arguments (if any)
              \g<identifier>\s*
              (?<type-args>\s*<(?:[^<>]|\g<type-args>)+>\s*)?
            )
            (?:\s*\.\s*\g<name-and-type-args>)*
          )
          (?:\s*\?\s*)? # nullable suffix?
          (?:\s*\[(?:\s*,\s*)*\]\s*)* # array suffix?
        )
      )?\s*
      (?=\[)
    beginCaptures:
      '1': { name: keyword.control.new.apex }
      '2':
        patterns:
          - include: '#support-type'
          - include: '#type'
    end: (?<=\])
    patterns:
      - include: '#bracketed-argument-list'

  argument-list:
    begin: \(
    beginCaptures:
      '0': { name: punctuation.parenthesis.open.apex }
    end: \)
    endCaptures:
      '0': { name: punctuation.parenthesis.close.apex }
    patterns:
      - include: '#named-argument'
      - include: '#expression'
      - include: '#punctuation-comma'

  bracketed-argument-list:
    begin: \[
    beginCaptures:
      '0': { name: punctuation.squarebracket.open.apex }
    end: \]
    endCaptures:
      '0': { name: punctuation.squarebracket.close.apex }
    patterns:
      - include: '#soql-query-expression'
      - include: '#named-argument'
      - include: '#expression'
      - include: '#punctuation-comma'

  named-argument:
    begin: (@?[_[:alpha:]][_[:alnum:]]*)\s*(:)
    beginCaptures:
      '1': { name: entity.name.variable.parameter.apex }
      '2': { name: punctuation.separator.colon.apex }
    end: (?=(,|\)|\]))
    patterns:
      - include: '#expression'

  type:
    name: meta.type.apex
    patterns:
      - include: '#comment'
      - include: '#type-builtin'
      - include: '#type-name'
      - include: '#type-arguments'
      - include: '#type-array-suffix'
      - include: '#type-nullable-suffix'

  type-builtin:
    match: \b(Blob|Boolean|byte|Date|Datetime|Decimal|Double|ID|Integer|Long|Object|String|Time|void)\b
    captures:
      '1': { name: keyword.type.apex }

  type-name:
    patterns:
      - match: (@?[_[:alpha:]][_[:alnum:]]*)\s*(\.)
        captures:
          '1': { name: storage.type.apex }
          '2': { name: punctuation.accessor.apex }
      - match: (\.)\s*(@?[_[:alpha:]][_[:alnum:]]*)
        captures:
          '1': { name: punctuation.accessor.apex }
          '2': { name: storage.type.apex }
      - name: storage.type.apex
        match: '@?[_[:alpha:]][_[:alnum:]]*'

  type-arguments:
    begin: '<'
    beginCaptures:
      '0': { name: punctuation.definition.typeparameters.begin.apex }
    end: '>'
    endCaptures:
      '0': { name: punctuation.definition.typeparameters.end.apex }
    patterns:
      - include: '#comment'
      - include: '#support-type'
      - include: '#type'
      - include: '#punctuation-comma'

  type-array-suffix:
    begin: \[
    beginCaptures:
      '0': { name: punctuation.squarebracket.open.apex }
    end: \]
    endCaptures:
      '0': { name: punctuation.squarebracket.close.apex }
    patterns:
      - include: '#punctuation-comma'

  type-nullable-suffix:
    match: '\?'
    captures:
      '0': { name: punctuation.separator.question-mark.apex }

  operator-assignment:
    name: keyword.operator.assignment.apex
    match: (?<!=|!)(=)(?!=)

  operator-safe-navigation:
    name: keyword.operator.safe-navigation.apex
    match: '\?\.'

  punctuation-comma:
    name: punctuation.separator.comma.apex
    match: ','

  punctuation-semicolon:
    name: punctuation.terminator.statement.apex
    match: ;

  punctuation-accessor:
    name: punctuation.accessor.apex
    match: \.

  comment:
    patterns:
      - name: comment.block.apex
        begin: /\*(\*)?
        beginCaptures:
          '0': { name: punctuation.definition.comment.apex }
        end: \*/
        endCaptures:
          '0': { name: punctuation.definition.comment.apex }
      - begin: (^\s+)?(?=//)
        beginCaptures:
          '1': { name: punctuation.whitespace.comment.leading.apex }
        end: (?=$)

  javadoc-comment:
    patterns:
      - name: comment.block.javadoc.apex
        begin: ^\s*(/\*\*)(?!/)
        beginCaptures:
          '1': { name: punctuation.definition.comment.apex }
        end: \*/
        endCaptures:
          '0': { name: punctuation.definition.comment.apex }
        patterns:
          - match: "@(deprecated|author|return|see|serial|since|version|usage|name|link)\\b"
            name: keyword.other.documentation.javadoc.apex
          - match: (@param)\s+(\S+)
            captures:
              '1': { name: keyword.other.documentation.javadoc.apex }
              '2': { name: entity.name.variable.parameter.apex }
          - match: (@(?:exception|throws))\s+(\S+)
            captures:
              '1': { name: keyword.other.documentation.javadoc.apex }
              '2': { name: entity.name.type.class.apex }
          - match: (`([^`]+?)`)
            captures:
              '1': { name: string.quoted.single.apex }
